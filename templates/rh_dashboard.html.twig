{% extends 'base.html.twig' %}
{% block title %}Opportunities Dashboard{% endblock %}
{% block stylesheets %}
<style>
    body { 
        background: linear-gradient(135deg, #a8ff78 0%, #78ffd6 100%);
        min-height: 100vh;
        font-family: 'Segoe UI', 'Roboto', Arial, sans-serif;
        color: #333;
        margin: 0;
        padding: 0;
    }
    .container { max-width: 900px; margin: 60px auto 0 auto; padding: 20px; }
    .main-content { display: flex; flex-direction: column; align-items: center; }
    .opportunities-section {
        background: #fff;
        border-radius: 24px;
        box-shadow: 0 8px 32px rgba(0, 180, 255, 0.10);
        padding: 50px 40px;
        width: 100%;
        margin-bottom: 32px;
        border: 3px solid;
        border-image: linear-gradient(90deg, #00b4ff 0%, #ffe066 100%) 1;
        position: relative;
        overflow: hidden;
    }
    .opportunities-section::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, #00b4ff 0%, #ffe066 100%);
    }
    .section-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 25px; padding-bottom: 15px; border-bottom: 2px solid #f0f0f0; }
    .section-header h2 { 
        font-size: 2.8rem; 
        font-weight: 800; 
        background: linear-gradient(135deg, #00b4ff 0%, #ffe066 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        margin-bottom: 40px;
        text-align: center;
        letter-spacing: 1.5px;
        text-shadow: 0 2px 4px rgba(0, 180, 255, 0.1);
        margin: 0;
    }
    .btn-primary { background: linear-gradient(135deg, #00b4ff 0%, #ffe066 100%); color: #222; border: none; padding: 15px 40px; border-radius: 30px; cursor: pointer; font-weight: 700; font-size: 1.1rem; transition: all 0.3s ease; box-shadow: 0 4px 15px rgba(0, 180, 255, 0.2); }
    .btn-primary:hover { transform: translateY(-2px); box-shadow: 0 8px 25px rgba(0, 180, 255, 0.3); color: #0077b6; }
    .opportunity-card { 
        background: #fff;
        border-radius: 16px;
        padding: 20px;
        box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);
        border: 1px solid #e0e0e0;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
        margin-bottom: 16px;
    }
    .opportunity-card:hover { transform: translateY(-2px); box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15); }
    .opportunity-header { display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 12px; }
    .opportunity-title { font-size: 1.4rem; font-weight: 700; color: #007bff; margin-bottom: 2px; }
    .opportunity-company { font-size: 0.9rem; color: #666; font-weight: 500; }
    .opportunity-actions { display: flex; gap: 8px; align-items: center; }
    .btn-delete { 
        background: #dc3545; 
        color: white; 
        border: none; 
        padding: 8px 12px; 
        border-radius: 6px; 
        cursor: pointer; 
        font-size: 0.9rem; 
        font-weight: 600; 
        transition: all 0.3s ease; 
        text-decoration: none;
        display: inline-block;
    }
    .btn-delete:hover { 
        background: #c82333; 
        transform: translateY(-1px); 
        box-shadow: 0 2px 8px rgba(220, 53, 69, 0.3);
    }
    .btn-edit { background: linear-gradient(90deg, #ffc107 0%, #fd7e14 100%); color: #222; border: none; padding: 8px 12px; border-radius: 6px; cursor: pointer; font-size: 0.9rem; font-weight: 600; transition: all 0.3s ease; }
    .btn-edit:hover { background: linear-gradient(90deg, #e0a800 0%, #e8590c 100%); color: #222; }
    .btn-inform-admin { background: #28a745; color: white; border: none; padding: 8px 16px; border-radius: 6px; cursor: pointer; font-size: 0.9rem; font-weight: 600; transition: all 0.3s ease; }
    .btn-inform-admin:hover { background: #218838; transform: translateY(-1px); }
    .btn-inform-admin:disabled { background: #6c757d; color: #adb5bd; cursor: not-allowed; transform: none; }
    .btn-save-notifications { background: linear-gradient(90deg, #28a745 0%, #20c997 100%); color: white; border: none; padding: 13px 36px; border-radius: 30px; cursor: pointer; font-weight: 700; font-size: 1.1rem; transition: all 0.3s, box-shadow 0.2s; box-shadow: 0 2px 8px rgba(40,167,69,0.10); outline: none; }
    .btn-save-notifications:hover { background: linear-gradient(90deg, #218838 0%, #1ea085 100%); color: white; box-shadow: 0 4px 16px rgba(40,167,69,0.16); transform: translateY(-2px) scale(1.04); }
    .inform-admin-checkbox { transition: all 0.3s ease; }
    .inform-admin-checkbox input[type="checkbox"]:checked { accent-color: #28a745; }
    .inform-admin-checkbox input[type="checkbox"]:disabled { opacity: 0.6; cursor: not-allowed; }
    .opportunity-title { font-size: 1.3rem; font-weight: 800; color: #00b4ff; margin-bottom: 4px; }
    .opportunity-company { font-size: 1rem; color: #666; font-weight: 600; }
    .opportunity-details { display: grid; grid-template-columns: 1fr 1fr; gap: 10px; margin-bottom: 12px; }
    .detail-item { display: flex; flex-direction: column; }
    .detail-label { font-size: 0.85rem; color: #666; font-weight: 600; margin-bottom: 3px; }
    .detail-value { font-size: 0.95rem; color: #333; font-weight: 600; }
    .value-amount { color: #007bff; }
    .opportunity-description { color: #666; font-size: 0.9rem; line-height: 1.4; margin-bottom: 12px; }
    .probability-bar { width: 100%; height: 6px; background: #f0f0f0; border-radius: 3px; overflow: hidden; margin-top: 5px; }
    .probability-fill { height: 100%; background: linear-gradient(90deg, #ff4444, #ffaa00, #00aa00); border-radius: 3px; transition: width 0.8s ease; }
    
    /* PDF Upload Button Styles */
    .btn-upload-pdf {
        background: linear-gradient(135deg, #28a745 0%, #20c997 100%) !important;
        color: white !important;
        border: none !important;
        padding: 8px 16px !important;
        border-radius: 8px !important;
        cursor: pointer !important;
        font-weight: 600 !important;
        font-size: 0.9rem !important;
        transition: all 0.3s ease !important;
        pointer-events: auto !important;
        z-index: 1000 !important;
    }
    
    .btn-upload-pdf:hover {
        transform: translateY(-1px) !important;
        box-shadow: 0 4px 12px rgba(40, 167, 69, 0.3) !important;
    }
    
    .btn-upload-pdf:disabled {
        opacity: 0.6 !important;
        cursor: not-allowed !important;
        transform: none !important;
    }
    
    /* Flash message animations */
    @keyframes slideIn {
        from {
            transform: translateY(-20px);
            opacity: 0;
        }
        to {
            transform: translateY(0);
            opacity: 1;
        }
    }
    
    .flash-message {
        position: relative;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        border-left: 4px solid rgba(255, 255, 255, 0.3);
    }
    
    .flash-message::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 3px;
        background: rgba(255, 255, 255, 0.3);
        border-radius: 12px 12px 0 0;
    }

    @media (max-width: 768px) {
        .container { margin: 40px 15px 0 15px; padding: 10px; }
        .opportunities-section { padding: 30px 20px; }
        .section-header h2 { font-size: 2.2rem; margin-bottom: 30px; }
        .opportunity-details { grid-template-columns: 1fr; }
    }
    @media (max-width: 480px) {
        .opportunities-section { padding: 25px 15px; }
        .section-header h2 { font-size: 1.8rem; margin-bottom: 25px; }
    }
</style>
{% endblock %}
{% block body %}
{% include 'navbar.html.twig' %}
<div class="container">
    <div class="main-content">
        <section class="opportunities-section">
            {% for message in app.flashes('success') %}
                <div class="flash-message success" id="flash-{{ loop.index }}" style="background: linear-gradient(135deg, #4caf50 0%, #8bc34a 100%); color: white; padding: 15px 20px; border-radius: 12px; margin-bottom: 20px; text-align: center; font-weight: 600; animation: slideIn 0.5s ease-out; position: relative;">
                    <span style="display: block; margin-right: 30px;">{{ message }}</span>
                </div>
            {% endfor %}
            {% for message in app.flashes('error') %}
                <div class="flash-message error" id="flash-{{ loop.index }}" style="background: linear-gradient(135deg, #ff4757 0%, #ff3742 100%); color: white; padding: 15px 20px; border-radius: 12px; margin-bottom: 20px; text-align: center; font-weight: 600; animation: slideIn 0.5s ease-out; position: relative;">
                    <span style="display: block; margin-right: 30px;">{{ message }}</span>
                </div>
            {% endfor %}
            {% for message in app.flashes('warning') %}
                <div class="flash-message warning" id="flash-{{ loop.index }}" style="background: linear-gradient(135deg, #ffc107 0%, #ff9800 100%); color: white; padding: 15px 20px; border-radius: 12px; margin-bottom: 20px; text-align: center; font-weight: 600; animation: slideIn 0.5s ease-out; position: relative;">
                    <span style="display: block; margin-right: 30px;">{{ message }}</span>
                </div>
            {% endfor %}
            {% for message in app.flashes('info') %}
                <div class="flash-message info" id="flash-{{ loop.index }}" style="background: linear-gradient(135deg, #17a2b8 0%, #20c997 100%); color: white; padding: 15px 20px; border-radius: 12px; margin-bottom: 20px; text-align: center; font-weight: 600; animation: slideIn 0.5s ease-out; position: relative;">
                    <span style="display: block; margin-right: 30px;">{{ message }}</span>
                </div>
            {% endfor %}
            <div class="section-header">
                <h2>Opportunities</h2>
                <div style="display: flex; gap: 10px; align-items: center;">
                    <a href="{{ path('rh_test_email') }}" class="btn-test-email" style="background: linear-gradient(90deg, #ff6b6b 0%, #ee5a24 100%); color: white; border: none; padding: 10px 20px; border-radius: 20px; cursor: pointer; font-weight: 700; font-size: 0.9rem; transition: all 0.3s ease; text-decoration: none;">
                        📧 Test Email
                    </a>
                    <a href="{{ path('rh_add_opportunity_page') }}" class="btn-primary" style="text-decoration: none; display: inline-block;">
                        ➕ Add Opportunity
                    </a>
                </div>
            </div>
            
            <!-- Notifications Section -->
            {% if notifications|length > 0 %}
                <div class="notifications-section" style="margin-bottom: 30px;">
                    <h3 style="color: #00b4ff; font-size: 1.5rem; margin-bottom: 15px;">🔔 New Notifications</h3>
                    {% for notification in notifications %}
                        <div class="notification-card" data-notification-id="{{ notification.id }}" style="
                            background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
                            border: 2px solid #ffc107;
                            border-radius: 12px;
                            padding: 16px;
                            margin-bottom: 12px;
                            position: relative;
                            cursor: pointer;
                            transition: all 0.3s ease;
                        ">
                            <div style="display: flex; justify-content: space-between; align-items: flex-start;">
                                <div>
                                    <p style="margin: 0; color: #856404; font-weight: 600; font-size: 1rem;">
                                        {{ notification.message }}
                                    </p>
                                    <small style="color: #856404; opacity: 0.8;">
                                        {{ notification.createdAt|date('Y-m-d H:i') }}
                                    </small>
                                </div>
                                <button class="mark-read-btn" style="
                                    background: #28a745;
                                    color: white;
                                    border: none;
                                    border-radius: 50%;
                                    width: 24px;
                                    height: 24px;
                                    cursor: pointer;
                                    font-size: 12px;
                                    display: flex;
                                    align-items: center;
                                    justify-content: center;
                                " title="Mark as read">✓</button>
                            </div>
                        </div>
                    {% endfor %}
                </div>
            {% endif %}
            <div id="opportunitiesList">
                {% for opp in opportunities %}
                    <div class="opportunity-card">
                        <div class="opportunity-header">
                            <div>
                                <div class="opportunity-title">{{ opp.name }}</div>
                                <div class="opportunity-company">{{ opp.company }}</div>
                            </div>
                            <div class="opportunity-actions">
                                <form method="post" action="{{ path('rh_inform_admin', {'id': opp.id}) }}" style="display:inline;">
                                    <button type="submit" class="btn-inform-admin" title="Inform Administrator immediately" {% if opp.notifiedToAdmin %}disabled{% endif %}>
                                        {% if opp.notifiedToAdmin %}
                                            ✅ Already Notified
                                        {% else %}
                                            📧 Inform Admin
                                        {% endif %}
                                    </button>
                                </form>
                                <form method="post" action="{{ path('rh_delete_opportunity', {'id': opp.id}) }}" style="display:inline;" onsubmit="return confirmDelete('{{ opp.name }}')">
                                    <button type="submit" class="btn-delete" title="Delete this opportunity">🗑️</button>
                                </form>
                                <a href="{{ path('rh_edit_opportunity_page', {'id': opp.id}) }}" class="btn-edit" title="Edit this opportunity">📊</a>
                            </div>
                        </div>
                        

                        <div class="opportunity-details">
                            <div class="detail-item">
                                <span class="detail-label">👤 Contact:</span>
                                <span class="detail-value">{{ opp.contact }}</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">📅 Deadline:</span>
                                <span class="detail-value">{{ opp.closeDate ? opp.closeDate|date('Y-m-d') : '' }}</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">🎯 Decision:</span>
                                <span class="detail-value">
                                    {% if opp.status == 'approved' %}
                                        <span style="color: #28a745; font-weight: 600;">✅ Approved</span>
                                    {% elseif opp.status == 'rejected' %}
                                        <span style="color: #ff4757; font-weight: 600;">❌ Rejected</span>
                                    {% elseif opp.status == 'pending' %}
                                        <span style="color: #ffc107; font-weight: 600;">⏳ Pending</span>
                                    {% elseif opp.status == 'under_review' %}
                                        <span style="color: #00b4ff; font-weight: 600;">🔍 Under Review</span>
                                    {% else %}
                                        <span style="color: #6c757d; font-weight: 600;">📋 Not Set</span>
                                    {% endif %}
                                </span>
                            </div>
                            

                            <div class="detail-item">
                                <span class="detail-label">💰 Value:</span>
                                <span class="detail-value value-amount">{{ opp.value }} DT</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">📧 Admin Status:</span>
                                <span class="detail-value">
                                    {% if opp.notifiedToAdmin %}
                                        <span style="color: #28a745; font-weight: 600;">✅ Notified</span>
                                    {% else %}
                                        <span style="color: #ffc107; font-weight: 600;">⏳ Pending</span>
                                    {% endif %}
                                </span>
                            </div>
                        </div>
                        {% if opp.description %}
                            <div class="opportunity-description">{{ opp.description }}</div>
                        {% endif %}
                        
                        {% if opp.status == 'approved' %}
                            <div class="pdf-upload-section" style="margin-top: 16px; padding: 16px; background: linear-gradient(135deg, #e8f5e8 0%, #f0fff0 100%); border-radius: 12px; border: 2px solid #28a745;">
                                <h4 style="color: #28a745; margin-bottom: 12px; font-weight: 700; font-size: 1rem;">📄 Upload PDF for this Approved Opportunity</h4>
                                <form class="pdf-upload-form" data-opportunity-id="{{ opp.id }}" method="post" enctype="multipart/form-data" action="{{ path('rh_upload_pdf', {'id': opp.id}) }}">
                                    <div style="display: flex; gap: 10px; align-items: center;">
                                        <input type="file" name="pdfFile" accept=".pdf" style="flex: 1; padding: 8px 12px; border: 2px solid #28a745; border-radius: 8px; background: white; font-size: 0.9rem;">
                                        <button type="submit" class="btn-upload-pdf" style="background: linear-gradient(135deg, #28a745 0%, #20c997 100%); color: white; border: none; padding: 8px 16px; border-radius: 8px; cursor: pointer; font-weight: 600; font-size: 0.9rem;">📤 Send PDF</button>
                                    </div>
                                    <small style="color: #666; display: block; margin-top: 4px; font-size: 0.8rem;">Only PDF files are allowed. Max size: 10MB.</small>
                                </form>
                            </div>
                        {% endif %}
                    </div>
                {% else %}
                    <div>No opportunities found.</div>
                {% endfor %}
            </div>
        </section>
    </div>
</div>

<script>
    function confirmDelete(opportunityName) {
        return confirm(`Are you sure you want to delete the opportunity "${opportunityName}"? This action is irreversible.`);
    }
    
    function uploadPdfFile(button) {
        console.log('uploadPdfFile function called!');
        
        const form = button.closest('.pdf-upload-form');
        const opportunityId = form.getAttribute('data-opportunity-id');
        const fileInput = form.querySelector('input[type="file"]');
        const file = fileInput.files[0];
        
        console.log('Upload details:', { opportunityId, file });
        
        if (!file) {
            alert('Please select a PDF file to upload.');
            return;
        }
        
        if (file.type !== 'application/pdf') {
            alert('Only PDF files are allowed.');
            return;
        }
        
        const formData = new FormData();
        formData.append('pdfFile', file);
        
        // Show loading state
        const originalText = button.innerHTML;
        button.innerHTML = '📤 Uploading...';
        button.disabled = true;
        
        console.log('Sending request to:', `/rh/upload-pdf/${opportunityId}`);
        
        fetch(`/rh/upload-pdf/${opportunityId}`, {
            method: 'POST',
            body: formData
        })
        .then(response => {
            console.log('Response status:', response.status);
            return response.json();
        })
        .then(data => {
            console.log('Response data:', data);
            if (data.success) {
                alert('✅ PDF uploaded successfully! The admin has been notified.');
                fileInput.value = ''; // Clear the file input
                loadPdfFiles(opportunityId); // Reload the PDF list
            } else {
                alert('❌ Upload failed: ' + data.error);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('❌ Upload failed. Please try again.');
        })
        .finally(() => {
            // Restore button state
            button.innerHTML = originalText;
            button.disabled = false;
        });
    }
    
    document.addEventListener('DOMContentLoaded', function() {
        // Handle flash messages - make them persistent and add close button
        const flashMessages = document.querySelectorAll('.flash-message');
        flashMessages.forEach((message, index) => {
            // Add close button
            const closeBtn = document.createElement('button');
            closeBtn.innerHTML = '×';
            closeBtn.style.cssText = `
                position: absolute;
                top: 5px;
                right: 10px;
                background: none;
                border: none;
                color: white;
                font-size: 20px;
                cursor: pointer;
                font-weight: bold;
                opacity: 0.8;
                transition: opacity 0.3s;
                z-index: 1000;
            `;
            closeBtn.addEventListener('mouseenter', () => closeBtn.style.opacity = '1');
            closeBtn.addEventListener('mouseleave', () => closeBtn.style.opacity = '0.8');
            closeBtn.addEventListener('click', () => {
                message.style.transform = 'translateY(-20px)';
                message.style.opacity = '0';
                message.style.transition = 'all 0.3s ease';
                setTimeout(() => {
                    if (message.parentNode) {
                        message.remove();
                    }
                }, 300);
            });
            message.appendChild(closeBtn);
            
            // Store message in sessionStorage to prevent it from disappearing on page refresh
            const messageText = message.querySelector('span').textContent;
            sessionStorage.setItem(`flash_message_${index}`, messageText);
            sessionStorage.setItem(`flash_type_${index}`, message.className.includes('success') ? 'success' : 
                                                      message.className.includes('error') ? 'error' : 
                                                      message.className.includes('warning') ? 'warning' : 'info');
            
            // Auto-hide after 15 seconds (increased from 8)
            setTimeout(() => {
                if (message.parentNode) {
                    message.style.transform = 'translateY(-20px)';
                    message.style.opacity = '0';
                    message.style.transition = 'all 0.3s ease';
                    setTimeout(() => {
                        if (message.parentNode) {
                            message.remove();
                        }
                    }, 300);
                }
            }, 15000);
        });
        
        // Check for stored flash messages on page load
        let storedIndex = 0;
        while (sessionStorage.getItem(`flash_message_${storedIndex}`)) {
            const messageText = sessionStorage.getItem(`flash_message_${storedIndex}`);
            const messageType = sessionStorage.getItem(`flash_type_${storedIndex}`);
            
            // Create and display the message
            const messageDiv = document.createElement('div');
            messageDiv.className = `flash-message ${messageType}`;
            messageDiv.style.cssText = `
                background: ${messageType === 'success' ? 'linear-gradient(135deg, #4caf50 0%, #8bc34a 100%)' :
                             messageType === 'error' ? 'linear-gradient(135deg, #ff4757 0%, #ff3742 100%)' :
                             messageType === 'warning' ? 'linear-gradient(135deg, #ffc107 0%, #ff9800 100%)' :
                             'linear-gradient(135deg, #17a2b8 0%, #20c997 100%)'};
                color: white;
                padding: 15px 20px;
                border-radius: 12px;
                margin-bottom: 20px;
                text-align: center;
                font-weight: 600;
                animation: slideIn 0.5s ease-out;
                position: relative;
            `;
            messageDiv.innerHTML = `<span style="display: block; margin-right: 30px;">${messageText}</span>`;
            
            // Insert at the beginning of the opportunities section
            const opportunitiesSection = document.querySelector('.opportunities-section');
            opportunitiesSection.insertBefore(messageDiv, opportunitiesSection.firstChild);
            
            // Add close button to stored message
            const closeBtn = document.createElement('button');
            closeBtn.innerHTML = '×';
            closeBtn.style.cssText = `
                position: absolute;
                top: 5px;
                right: 10px;
                background: none;
                border: none;
                color: white;
                font-size: 20px;
                cursor: pointer;
                font-weight: bold;
                opacity: 0.8;
                transition: opacity 0.3s;
                z-index: 1000;
            `;
            closeBtn.addEventListener('mouseenter', () => closeBtn.style.opacity = '1');
            closeBtn.addEventListener('mouseleave', () => closeBtn.style.opacity = '0.8');
            closeBtn.addEventListener('click', () => {
                messageDiv.style.transform = 'translateY(-20px)';
                messageDiv.style.opacity = '0';
                messageDiv.style.transition = 'all 0.3s ease';
                setTimeout(() => {
                    if (messageDiv.parentNode) {
                        messageDiv.remove();
                    }
                }, 300);
                // Remove from sessionStorage
                sessionStorage.removeItem(`flash_message_${storedIndex}`);
                sessionStorage.removeItem(`flash_type_${storedIndex}`);
            });
            messageDiv.appendChild(closeBtn);
            
            // Auto-hide stored message after 15 seconds
            setTimeout(() => {
                if (messageDiv.parentNode) {
                    messageDiv.style.transform = 'translateY(-20px)';
                    messageDiv.style.opacity = '0';
                    messageDiv.style.transition = 'all 0.3s ease';
                    setTimeout(() => {
                        if (messageDiv.parentNode) {
                            messageDiv.remove();
                        }
                    }, 300);
                }
                // Remove from sessionStorage
                sessionStorage.removeItem(`flash_message_${storedIndex}`);
                sessionStorage.removeItem(`flash_type_${storedIndex}`);
            }, 15000);
            
            storedIndex++;
        }
        

        
        // Load PDF files for approved opportunities only
        const approvedOpportunities = document.querySelectorAll('.opportunity-card');
        approvedOpportunities.forEach(card => {
            const decisionValue = card.querySelector('.detail-value span');
            if (decisionValue && decisionValue.textContent.includes('✅ Approved')) {
                const opportunityId = card.querySelector('.pdf-upload-form')?.getAttribute('data-opportunity-id');
                if (opportunityId) {
                    loadPdfFiles(opportunityId);
                }
            }
        });
        
        // Debug: Check if PDF upload buttons exist
        const pdfButtons = document.querySelectorAll('.btn-upload-pdf');
        console.log('Found PDF upload buttons:', pdfButtons.length);
        pdfButtons.forEach((btn, index) => {
            console.log(`Button ${index}:`, btn);
        });
        
        // Handle marking notifications as read
        // Handle marking notifications as read
        const markReadButtons = document.querySelectorAll('.mark-read-btn');
        markReadButtons.forEach(button => {
            button.addEventListener('click', function(e) {
                e.stopPropagation();
                const notificationCard = this.closest('.notification-card');
                const notificationId = notificationCard.getAttribute('data-notification-id');
                
                markNotificationAsRead(notificationId, notificationCard);
            });
        });
        
        // Handle clicking on notification cards
        const notificationCards = document.querySelectorAll('.notification-card');
        notificationCards.forEach(card => {
            card.addEventListener('click', function() {
                const notificationId = this.getAttribute('data-notification-id');
                markNotificationAsRead(notificationId, this);
            });
        });
        
        document.querySelectorAll('.pdf-upload-form').forEach(form => {
            form.addEventListener('submit', function(e) {
                e.preventDefault();
                const opportunityId = form.getAttribute('data-opportunity-id');
                const fileInput = form.querySelector('input[type="file"]');
                const file = fileInput.files[0];
                if (!file) {
                    alert('Please select a PDF file to upload.');
                    return;
                }
                if (file.type !== 'application/pdf') {
                    alert('Only PDF files are allowed.');
                    return;
                }
                const formData = new FormData();
                formData.append('pdfFile', file);

                const button = form.querySelector('button[type="submit"]');
                const originalText = button.innerHTML;
                button.innerHTML = '📤 Uploading...';
                button.disabled = true;

                fetch(`/rh/upload-pdf/${opportunityId}`, {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('✅ PDF uploaded successfully!');
                        fileInput.value = '';
                    } else {
                        alert('❌ Upload failed: ' + data.error);
                    }
                })
                .catch(error => {
                    alert('❌ Upload failed. Please try again.');
                })
                .finally(() => {
                    button.innerHTML = originalText;
                    button.disabled = false;
                });
            });
        });
        
    }
    
    function loadPdfFiles(opportunityId) {
        fetch(`/rh/get-pdf-files/${opportunityId}`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const pdfList = document.querySelector(`.uploaded-pdfs[data-opportunity-id="${opportunityId}"]`);
                if (pdfList) {
                    if (data.files.length > 0) {
                        pdfList.innerHTML = `
                            <h5 style="color: #28a745; margin-bottom: 8px; font-weight: 600;">📋 Uploaded PDFs:</h5>
                            ${data.files.map(file => `
                                <div class="pdf-item" style="display: flex; justify-content: space-between; align-items: center; padding: 8px; background: white; border-radius: 6px; margin-bottom: 6px; border: 1px solid #ddd;">
                                    <div style="flex: 1;">
                                        <div style="font-weight: 600; color: #333; font-size: 0.9rem;">${file.originalFilename}</div>
                                        <div style="font-size: 0.8rem; color: #666;">
                                            Size: ${(file.size / 1024).toFixed(1)} KB | 
                                            Uploaded: ${file.uploadedAt}
                                        </div>
                                    </div>
                                    <div style="display: flex; gap: 4px;">
                                        <a href="/rh/download-pdf/${file.id}" class="btn-download-pdf" style="background: #007bff; color: white; border: none; padding: 4px 8px; border-radius: 4px; cursor: pointer; font-size: 0.8rem; text-decoration: none;" title="Download PDF">📥</a>
                                        <button class="btn-delete-pdf" data-file-id="${file.id}" style="background: #dc3545; color: white; border: none; padding: 4px 8px; border-radius: 4px; cursor: pointer; font-size: 0.8rem;" title="Delete PDF">🗑️</button>
                                    </div>
                                </div>
                            `).join('')}
                        `;
                        
                        // Add event listeners for delete buttons
                        pdfList.querySelectorAll('.btn-delete-pdf').forEach(btn => {
                            btn.addEventListener('click', function() {
                                const fileId = this.getAttribute('data-file-id');
                                if (confirm('Are you sure you want to delete this PDF file?')) {
                                    deletePdfFile(fileId, opportunityId);
                                }
                            });
                        });
                    } else {
                        pdfList.innerHTML = '<p style="color: #666; font-style: italic; margin: 0;">No PDF files uploaded yet.</p>';
                    }
                }
            }
        })
        .catch(error => {
            console.error('Error loading PDF files:', error);
        });
    }
    
    function deletePdfFile(fileId, opportunityId) {
        fetch(`/rh/delete-pdf/${fileId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('✅ PDF file deleted successfully!');
                loadPdfFiles(opportunityId); // Reload the list
            } else {
                alert('❌ Failed to delete PDF: ' + data.error);
            }
        })
        .catch(error => {
            console.error('Error deleting PDF:', error);
            alert('❌ Error deleting PDF file. Please try again.');
        });
    }
    
    function markNotificationAsRead(notificationId, notificationCard) {
        fetch(`{{ path('rh_mark_notification_read', {'id': 'PLACEHOLDER'}) }}`.replace('PLACEHOLDER', notificationId), {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Animate the notification card out
                notificationCard.style.transform = 'translateX(100%)';
                notificationCard.style.opacity = '0';
                notificationCard.style.transition = 'all 0.3s ease';
                
                setTimeout(() => {
                    notificationCard.remove();
                    
                    // Check if there are no more notifications
                    const remainingNotifications = document.querySelectorAll('.notification-card');
                    if (remainingNotifications.length === 0) {
                        const notificationsSection = document.querySelector('.notifications-section');
                        if (notificationsSection) {
                            notificationsSection.remove();
                        }
                    }
                }, 300);
            }
        })
        .catch(error => {
            console.error('Error marking notification as read:', error);
        });
    }


</script>
{% endblock %} 