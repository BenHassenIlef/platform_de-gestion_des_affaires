{% extends 'base.html.twig' %}
{% block title %}Edit Opportunity{% endblock %}

{% block stylesheets %}
<style>
    body {
        background: linear-gradient(135deg, #a8ff78 0%, #78ffd6 100%);
        min-height: 100vh;
        font-family: 'Segoe UI', 'Roboto', Arial, sans-serif;
        color: #333;
        margin: 0;
        padding: 0;
    }

    .main-container {
        max-width: 800px;
        margin: 60px auto 0 auto;
        padding: 20px;
    }

    .form-section {
        background: #fff;
        border-radius: 24px;
        box-shadow: 0 8px 32px rgba(0, 180, 255, 0.10);
        padding: 50px 40px;
        border: 3px solid;
        border-image: linear-gradient(90deg, #00b4ff 0%, #ffe066 100%) 1;
        position: relative;
        overflow: hidden;
    }

    .form-section::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, #00b4ff 0%, #ffe066 100%);
    }

    .form-title {
        font-size: 2.8rem;
        font-weight: 800;
        background: linear-gradient(135deg, #00b4ff 0%, #ffe066 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        margin-bottom: 40px;
        text-align: center;
        letter-spacing: 1.5px;
        text-shadow: 0 2px 4px rgba(0, 180, 255, 0.1);
    }

    .form-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 25px;
        margin-bottom: 30px;
    }

    .form-group {
        margin-bottom: 0;
    }

    .form-group label {
        display: block;
        margin-bottom: 10px;
        font-weight: 700;
        color: #00b4ff;
        font-size: 1rem;
        letter-spacing: 0.5px;
    }

    .form-group input,
    .form-group select,
    .form-group textarea {
        width: 100%;
        padding: 15px 20px;
        border: 2px solid #e0e0e0;
        border-radius: 12px;
        font-size: 1rem;
        transition: all 0.3s ease;
        background: #f8fbff;
        box-sizing: border-box;
    }

    .form-group input:focus,
    .form-group select:focus,
    .form-group textarea:focus {
        outline: none;
        border-color: #00b4ff;
        background: #fffbe0;
        box-shadow: 0 0 0 3px rgba(0, 180, 255, 0.1);
    }

    .form-group.full-width {
        grid-column: 1 / -1;
    }

    .btn-save {
        background: linear-gradient(135deg, #00b4ff 0%, #ffe066 100%);
        color: #222;
        border: none;
        padding: 15px 40px;
        border-radius: 30px;
        cursor: pointer;
        font-weight: 700;
        font-size: 1.1rem;
        transition: all 0.3s ease;
        width: 100%;
        box-shadow: 0 4px 15px rgba(0, 180, 255, 0.2);
        margin-top: 20px;
    }

    .btn-save:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0, 180, 255, 0.3);
        color: #0077b6;
    }

    .btn-back {
        background: #f5f5f5;
        color: #666;
        border: none;
        padding: 15px 40px;
        border-radius: 30px;
        cursor: pointer;
        font-weight: 700;
        font-size: 1.1rem;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-block;
        margin-bottom: 20px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }

    .btn-back:hover {
        background: #e0e0e0;
        transform: translateY(-2px);
        text-decoration: none;
        color: #333;
    }

    .success-message {
        background: linear-gradient(135deg, #4caf50 0%, #8bc34a 100%);
        color: white;
        padding: 15px 20px;
        border-radius: 12px;
        margin-bottom: 20px;
        text-align: center;
        font-weight: 600;
        display: none;
    }

    .error-message {
        background: linear-gradient(135deg, #ff4757 0%, #ff3742 100%);
        color: white;
        padding: 15px 20px;
        border-radius: 12px;
        margin-bottom: 20px;
        text-align: center;
        font-weight: 600;
        display: none;
    }

    @media (max-width: 768px) {
        .main-container {
            margin: 40px 15px 0 15px;
            padding: 10px;
        }
        
        .form-section {
            padding: 30px 20px;
        }
        
        .form-title {
            font-size: 2.2rem;
            margin-bottom: 30px;
        }
        
        .form-grid {
            grid-template-columns: 1fr;
        }
    }

    @media (max-width: 480px) {
        .form-section {
            padding: 25px 15px;
        }
        
        .form-title {
            font-size: 1.8rem;
            margin-bottom: 25px;
        }
    }
</style>
{% endblock %}

{% block body %}
    {% include 'navbar.html.twig' %}
    
    <div class="main-container">
                    <a href="{{ path('rh_dashboard') }}" class="btn-back">
            ← Back to Opportunities
        </a>
        
        <div class="form-section">
            <h1 class="form-title">✏️ Edit Opportunity</h1>
            
            <div class="success-message" id="successMessage">
                ✅ Opportunity updated successfully!
            </div>
            
            <div class="error-message" id="errorMessage">
                ❌ Error updating opportunity. Please try again.
            </div>
            
            <form method="post" action="{{ path('rh_edit_opportunity', {'id': opportunity.id}) }}" id="opportunityForm">
                <div class="form-grid">
                    <div class="form-group">
                        <label for="opportunityName">Opportunity Name *</label>
                        <input type="text" id="opportunityName" name="opportunityName" value="{{ opportunity.name }}" required placeholder="Enter opportunity name">
                    </div>
                    
                    <div class="form-group">
                        <label for="companyName">Company Name *</label>
                        <input type="text" id="companyName" name="companyName" value="{{ opportunity.company }}" required placeholder="Enter company name">
                    </div>
                    
                    <div class="form-group">
                        <label for="contactPerson">Contact Phone Number</label>
                        <div style="display: flex; gap: 10px; align-items: center;">
                            <select id="countryCode" style="width: 100px; padding: 15px 10px; border: 2px solid #e0e0e0; border-radius: 12px; font-size: 1rem; background: #f8fbff; cursor: pointer;">
                                <option value="+216" selected>🇹🇳 +216</option>
                                <option value="+33">🇫🇷 +33</option>
                                <option value="+1">🇺🇸 +1</option>
                                <option value="+44">🇬🇧 +44</option>
                                <option value="+49">🇩🇪 +49</option>
                                <option value="+39">🇮🇹 +39</option>
                                <option value="+34">🇪🇸 +34</option>
                                <option value="+31">🇳🇱 +31</option>
                                <option value="+32">🇧🇪 +32</option>
                                <option value="+41">🇨🇭 +41</option>
                                <option value="+46">🇸🇪 +46</option>
                                <option value="+47">🇳🇴 +47</option>
                                <option value="+45">🇩🇰 +45</option>
                                <option value="+358">🇫🇮 +358</option>
                                <option value="+48">🇵🇱 +48</option>
                                <option value="+420">🇨🇿 +420</option>
                                <option value="+36">🇭🇺 +36</option>
                                <option value="+43">🇦🇹 +43</option>
                                <option value="+351">🇵🇹 +351</option>
                                <option value="+30">🇬🇷 +30</option>
                                <option value="+90">🇹🇷 +90</option>
                                <option value="+7">🇷🇺 +7</option>
                                <option value="+86">🇨🇳 +86</option>
                                <option value="+81">🇯🇵 +81</option>
                                <option value="+82">🇰🇷 +82</option>
                                <option value="+91">🇮🇳 +91</option>
                                <option value="+61">🇦🇺 +61</option>
                                <option value="+64">🇳🇿 +64</option>
                                <option value="+27">🇿🇦 +27</option>
                                <option value="+20">🇪🇬 +20</option>
                                <option value="+212">🇲🇦 +212</option>
                                <option value="+213">🇩🇿 +213</option>
                                <option value="+225">🇨🇮 +225</option>
                                <option value="+234">🇳🇬 +234</option>
                                <option value="+254">🇰🇪 +254</option>
                                <option value="+966">🇸🇦 +966</option>
                                <option value="+971">🇦🇪 +971</option>
                                <option value="+974">🇶🇦 +974</option>
                                <option value="+965">🇰🇼 +965</option>
                                <option value="+973">🇧🇭 +973</option>
                                <option value="+968">🇴🇲 +968</option>
                                <option value="+962">🇯🇴 +962</option>
                                <option value="+961">🇱🇧 +961</option>
                                <option value="+963">🇸🇾 +963</option>
                                <option value="+964">🇮🇶 +964</option>
                                <option value="+98">🇮🇷 +98</option>
                                <option value="+93">🇦🇫 +93</option>
                                <option value="+92">🇵🇰 +92</option>
                                <option value="+880">🇧🇩 +880</option>
                                <option value="+94">🇱🇰 +94</option>
                                <option value="+95">🇲🇲 +95</option>
                                <option value="+66">🇹🇭 +66</option>
                                <option value="+84">🇻🇳 +84</option>
                                <option value="+60">🇲🇾 +60</option>
                                <option value="+65">🇸🇬 +65</option>
                                <option value="+62">🇮🇩 +62</option>
                                <option value="+63">🇵🇭 +63</option>
                                <option value="+52">🇲🇽 +52</option>
                                <option value="+55">🇧🇷 +55</option>
                                <option value="+54">🇦🇷 +54</option>
                                <option value="+56">🇨🇱 +56</option>
                                <option value="+57">🇨🇴 +57</option>
                                <option value="+58">🇻🇪 +58</option>
                                <option value="+51">🇵🇪 +51</option>
                                <option value="+593">🇪🇨 +593</option>
                                <option value="+595">🇵🇾 +595</option>
                                <option value="+598">🇺🇾 +598</option>
                                <option value="+591">🇧🇴 +591</option>
                            </select>
                            <input type="tel" id="contactPerson" name="contactPerson" value="{{ opportunity.contact }}" placeholder="Enter phone number" pattern="[0-9\s\-\(\)]+" maxlength="15" style="flex: 1;">
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label for="opportunityValue">Provisional Bail (DT) *</label>
                        <input type="number" id="opportunityValue" name="opportunityValue" value="{{ opportunity.value }}" required min="0" placeholder="Enter amount">
                    </div>
                    
                    <div class="form-group">
                        <label for="closeDate">Deadline *</label>
                        <input type="date" id="closeDate" name="closeDate" value="{{ opportunity.closeDate ? opportunity.closeDate|date('Y-m-d') : '' }}" required>
                    </div>
                    
                    <div class="form-group full-width">
                        <label for="description">Description</label>
                        <textarea id="description" name="description" rows="4" placeholder="Enter opportunity description (optional)">{{ opportunity.description }}</textarea>
                    </div>
                    

                </div>

                <button type="submit" class="btn-save">
                    💾 Update Opportunity
                </button>
            </form>
        </div>
    </div>

    <script>
        // Force reload to clear cache
        if (performance.navigation.type === 1) {
            // Page was reloaded, clear any cached data
            sessionStorage.removeItem('countryCodeCache');
        }
        
        // Force reload if cache is detected
        if (sessionStorage.getItem('countryCodeCache')) {
            location.reload(true);
        }
        
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('opportunityForm');
            const successMessage = document.getElementById('successMessage');
            const errorMessage = document.getElementById('errorMessage');

            form.addEventListener('submit', function(e) {
                e.preventDefault();
                
                // Validation des champs requis
                const requiredFields = ['opportunityName', 'companyName', 'contactPerson', 'opportunityValue', 'closeDate'];
                let isValid = true;
                
                requiredFields.forEach(fieldName => {
                    const field = document.getElementById(fieldName);
                    if (!field.value.trim()) {
                        field.style.borderColor = '#ff4757';
                        isValid = false;
                    } else {
                        field.style.borderColor = '#e0e0e0';
                    }
                });
                
                if (isValid) {
                    // Récupérer les données du formulaire
                    const formData = new FormData(this);
                    
                    // Envoyer la requête AJAX
                    fetch('{{ path('rh_edit_opportunity', {'id': opportunity.id}) }}', {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => {
                        if (response.ok) {
                            return response.json();
                        } else {
                            throw new Error('Server error: ' + response.status);
                        }
                    })
                    .then(data => {
                        if (data.success) {
                            // Afficher le message de succès avec le message personnalisé
                            successMessage.textContent = data.message || '✅ Opportunity updated successfully!';
                            successMessage.style.display = 'block';
                            errorMessage.style.display = 'none';
                            
                            // Afficher le message d'avertissement si présent
                            if (data.warning) {
                                errorMessage.textContent = '⚠️ ' + data.warning;
                                errorMessage.style.display = 'block';
                                errorMessage.style.backgroundColor = '#fff3cd';
                                errorMessage.style.color = '#856404';
                                errorMessage.style.borderColor = '#ffeeba';
                            }
                            
                            // Rediriger après 3 secondes (plus de temps pour lire les avertissements)
                            setTimeout(() => {
                                window.location.href = '{{ path('rh_dashboard') }}';
                            }, 3000);
                        } else {
                            throw new Error(data.error || 'Unknown error');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        errorMessage.textContent = '❌ Error updating opportunity. Please try again.';
                        errorMessage.style.display = 'block';
                        successMessage.style.display = 'none';
                    });
                } else {
                    errorMessage.textContent = '❌ Please fill in all required fields.';
                    errorMessage.style.display = 'block';
                    successMessage.style.display = 'none';
                }
            });
            
            // Réinitialiser les bordures lors de la saisie
            document.querySelectorAll('input, select, textarea').forEach(field => {
                field.addEventListener('input', function() {
                    if (this.value.trim()) {
                        this.style.borderColor = '#e0e0e0';
                    }
                });
            });
            
            // Date validation
            const closeDateInput = document.getElementById('closeDate');
            
            // Set minimum date to today
            const today = new Date();
            const todayString = today.toISOString().split('T')[0];
            closeDateInput.setAttribute('min', todayString);
            
            // Add validation on form submission
            form.addEventListener('submit', function(e) {
                const selectedDate = new Date(closeDateInput.value);
                const today = new Date();
                today.setHours(0, 0, 0, 0); // Reset time to start of day
                
                if (selectedDate < today) {
                    e.preventDefault();
                    errorMessage.textContent = '❌ Error: Deadline cannot be in the past. Please select a date from today onwards.';
                    errorMessage.style.display = 'block';
                    successMessage.style.display = 'none';
                    closeDateInput.focus();
                    return false;
                }
            });
            
            // Add real-time validation when user changes the date
            closeDateInput.addEventListener('change', function() {
                const selectedDate = new Date(this.value);
                const today = new Date();
                today.setHours(0, 0, 0, 0);
                
                if (selectedDate < today) {
                    this.style.borderColor = '#dc3545';
                    this.style.backgroundColor = '#fff5f5';
                    
                    // Show error message
                    let errorMsg = this.parentNode.querySelector('.date-error');
                    if (!errorMsg) {
                        errorMsg = document.createElement('div');
                        errorMsg.className = 'date-error';
                        errorMsg.style.color = '#dc3545';
                        errorMsg.style.fontSize = '0.9rem';
                        errorMsg.style.marginTop = '5px';
                        errorMsg.style.fontWeight = '600';
                        this.parentNode.appendChild(errorMsg);
                    }
                    errorMsg.textContent = '❌ Please select a date from today onwards';
                } else {
                    this.style.borderColor = '#00b4ff';
                    this.style.backgroundColor = '#f8fbff';
                    
                    // Remove error message
                    const errorMsg = this.parentNode.querySelector('.date-error');
                    if (errorMsg) {
                        errorMsg.remove();
                    }
                }
            });
            
            // Phone number validation with country code
            const contactPhoneInput = document.getElementById('contactPerson');
            const countryCodeSelect = document.getElementById('countryCode');
            
            // Function to validate phone number
            function validatePhoneNumber() {
                const countryCode = countryCodeSelect.value;
                const phoneNumber = contactPhoneInput.value;
                const fullNumber = countryCode + ' ' + phoneNumber;
                
                // Remove all non-digit characters except spaces, hyphens, and parentheses
                let cleanValue = phoneNumber.replace(/[^\d\s\-\(\)]/g, '');
                
                // Validate phone number format (any length)
                const phoneRegex = /^[0-9]+$/;
                const digitsOnly = cleanValue.replace(/[\s\-\(\)]/g, '');
                
                if (digitsOnly.length > 0 && !phoneRegex.test(digitsOnly)) {
                    contactPhoneInput.style.borderColor = '#dc3545';
                    contactPhoneInput.style.backgroundColor = '#fff5f5';
                    
                    // Show error message
                    let errorMsg = contactPhoneInput.parentNode.querySelector('.phone-error');
                    if (!errorMsg) {
                        errorMsg = document.createElement('div');
                        errorMsg.style.color = '#dc3545';
                        errorMsg.style.fontSize = '0.9rem';
                        errorMsg.style.marginTop = '5px';
                        errorMsg.style.fontWeight = '600';
                        contactPhoneInput.parentNode.appendChild(errorMsg);
                    }
                    errorMsg.textContent = '❌ Please enter a valid phone number (digits only)';
                } else if (digitsOnly.length > 0) {
                    contactPhoneInput.style.borderColor = '#28a745';
                    contactPhoneInput.style.backgroundColor = '#f8fff8';
                    
                    // Remove error message
                    const errorMsg = contactPhoneInput.parentNode.querySelector('.phone-error');
                    if (errorMsg) {
                        errorMsg.remove();
                    }
                } else {
                    contactPhoneInput.style.borderColor = '#e0e0e0';
                    contactPhoneInput.style.backgroundColor = '#f8fbff';
                    
                    // Remove error message
                    const errorMsg = contactPhoneInput.parentNode.querySelector('.phone-error');
                    if (errorMsg) {
                        errorMsg.remove();
                    }
                }
            }
            
            // Add validation on form submission
            form.addEventListener('submit', function(e) {
                const countryCode = countryCodeSelect.value;
                const phoneNumber = contactPhoneInput.value;
                const digitsOnly = phoneNumber.replace(/[\s\-\(\)]/g, '');
                
                if (digitsOnly.length > 0 && !phoneRegex.test(digitsOnly)) {
                    e.preventDefault();
                    errorMessage.textContent = '❌ Error: Please enter a valid phone number (digits only)';
                    errorMessage.style.display = 'block';
                    successMessage.style.display = 'none';
                    contactPhoneInput.focus();
                    return false;
                }
                
                // Combine country code and phone number for submission only if phone number is provided
                if (digitsOnly.length > 0) {
                    const fullPhoneNumber = countryCode + ' ' + phoneNumber;
                    contactPhoneInput.value = fullPhoneNumber;
                } else {
                    // Clear the field if no phone number is provided
                    contactPhoneInput.value = '';
                }
            });
            
            // Real-time validation when user types
            contactPhoneInput.addEventListener('input', function() {
                // Remove all non-digit characters except spaces, hyphens, and parentheses
                let value = this.value.replace(/[^\d\s\-\(\)]/g, '');
                this.value = value;
                
                validatePhoneNumber();
            });
            
            // Update validation when country code changes
            countryCodeSelect.addEventListener('change', function() {
                validatePhoneNumber();
            });
        });
    </script>
{% endblock %}